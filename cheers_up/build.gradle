plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco' // Jacoco Plugin
}

group = 'com.hana'
version = 'v1.0'
sourceCompatibility = '21'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    archiveFileName = 'app.jar'
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // H2 Database for testing
    testImplementation 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.34' // 최신 버전으로 업데이트
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    // JWT - 최신 버전으로 업데이트
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

}


// Jacoco 설정 수정 부분
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: [
                            '**/CheersUpApplication.class',
                            '**/CheersUpApplication$*.class'
                    ])
        }))
    }


    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(1.0)
            }

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(300)
            }

        }
    }
}